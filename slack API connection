import os
import asyncio
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
import chainlit as cl
import logging
from threading import Thread

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize the Slack app
slack_app = App(token=os.environ["SLACK_BOT_TOKEN"])

# Global variable to store the Chainlit response
chainlit_response = None

@cl.on_chat_start
async def start():
    await cl.Message(content="Chainlit session started. Ready to process messages from Slack!").send()

@cl.on_message
async def main(message: cl.Message):
    global chainlit_response
    logger.info(f"Received message in Chainlit: {message.content}")
    
    # Process the message (you can add your logic here)
    response = f"Chainlit processed: {message.content}"
    
    # Store the response globally
    chainlit_response = response
    
    # Send response back to Chainlit
    await cl.Message(content=response).send()

@slack_app.event("app_mention")
def handle_app_mention(body, say):
    logger.info("Received app mention in Slack")
    event = body["event"]
    text = event["text"]
    
    # Send message to Chainlit
    asyncio.run(send_to_chainlit(text))
    
    # Wait for Chainlit to process (you might want to implement a more sophisticated waiting mechanism)
    global chainlit_response
    while chainlit_response is None:
        pass
    
    # Send response back to Slack
    say(chainlit_response)
    chainlit_response = None

@slack_app.event("message")
def handle_message(body, say):
    logger.info("Received message event in Slack")
    event = body["event"]
    
    # Check if it's a message in a channel the app is in
    if "channel_type" in event and event["channel_type"] == "channel":
        text = event["text"]
        
        # Send message to Chainlit
        asyncio.run(send_to_chainlit(text))
        
        # Wait for Chainlit to process
        global chainlit_response
        while chainlit_response is None:
            pass
        
        # Send response back to Slack
        say(chainlit_response)
        chainlit_response = None

async def send_to_chainlit(text):
    await cl.Message(content=text, author="slack_user").send()

@slack_app.error
def custom_error_handler(error, body, logger):
    logger.exception(f"Error: {error}")
    logger.info(f"Request body: {body}")

def run_slack():
    handler = SocketModeHandler(slack_app, os.environ["SLACK_APP_TOKEN"])
    handler.start()

# Run Slack in a separate thread
slack_thread = Thread(target=run_slack)
slack_thread.start()

# Chainlit will run in the main thread
if __name__ == "__main__":
    cl.run()
