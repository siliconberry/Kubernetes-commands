import os
import logging
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
import chainlit as cl

# Initialize the Slack app
app = App(token=os.environ["SLACK_BOT_TOKEN"])
logger = logging.getLogger(__name__)

# Chainlit app logic
@cl.on_message
async def on_message(msg: cl.Message):
    # Access the original slack event
    slack_event = cl.user_session.get("slack_event")
    slack_user = cl.user_session.get("user")
    attached_files = msg.elements
    
    # Process the message here
    print(f"Received message from {slack_user} with text: {msg.content}")
    
    # Send a response back to Slack
    await cl.Message(content="Hello World").send()

# Slack event listener for messages
@app.event("message")
def handle_message(payload, context):
    # Extract the message text
    message_text = payload["event"]["text"]
    channel_id = payload["event"]["channel"]
    user_id = payload["event"]["user"]
    
    # Forward the message to the Chainlit app
    cl.user_session.set("slack_event", payload["event"])
    cl.user_session.set("user", user_id)
    cl.user_session.set("channel", channel_id)
    
    # Trigger the Chainlit on_message function
    on_message(cl.Message(content=message_text))

# Start the Slack app
if __name__ == "__main__":
    handler = SocketModeHandler(app, os.environ["SLACK_APP_TOKEN"])
    handler.start()
