import os
import asyncio
from slack_bolt.async_app import AsyncApp
from slack_bolt.adapter.socket_mode.async_handler import AsyncSocketModeHandler
import chainlit as cl
import logging
from queue import Queue

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize the Slack app
slack_app = AsyncApp(token=os.environ["SLACK_BOT_TOKEN"])

# Queue to store messages from Slack
slack_message_queue = Queue()

@cl.on_chat_start
async def start():
    await cl.Message(content="Chainlit session started. Ready to process messages from Slack!").send()

    # Start processing Slack messages
    asyncio.create_task(process_slack_messages())

@cl.on_message
async def main(message: cl.Message):
    logger.info(f"Received message in Chainlit: {message.content}")
    
    # Process the message (you can add your logic here)
    response = f"Chainlit processed: {message.content}"
    
    # Send response back to Chainlit
    await cl.Message(content=response).send()

async def process_slack_messages():
    while True:
        if not slack_message_queue.empty():
            slack_message = slack_message_queue.get()
            await cl.Message(content=slack_message['text'], author=slack_message['user']).send()
        await asyncio.sleep(0.1)  # Short sleep to prevent busy-waiting

@slack_app.event("app_mention")
async def handle_app_mention(body, say):
    logger.info("Received app mention in Slack")
    event = body["event"]
    slack_message_queue.put({
        'text': event["text"],
        'user': event["user"],
        'say': say
    })

@slack_app.event("message")
async def handle_message(body, say):
    logger.info("Received message in Slack")
    event = body["event"]
    if "channel_type" in event and event["channel_type"] == "channel":
        slack_message_queue.put({
            'text': event["text"],
            'user': event["user"],
            'say': say
        })

@slack_app.error
async def custom_error_handler(error, body):
    logger.exception(f"Error: {error}")
    logger.info(f"Request body: {body}")

async def run_slack():
    handler = AsyncSocketModeHandler(slack_app, os.environ["SLACK_APP_TOKEN"])
    await handler.start_async()

# Run both Slack and Chainlit
@cl.on_chat_start
async def start_slack():
    asyncio.create_task(run_slack())

# Chainlit will run in the main thread
cl.run()
