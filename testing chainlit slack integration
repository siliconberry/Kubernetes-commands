import os
import asyncio
from fastapi import FastAPI, WebSocket
from fastapi.responses import HTMLResponse
from slack_bolt.async_app import AsyncApp
from slack_bolt.adapter.socket_mode.async_handler import AsyncSocketModeHandler
import chainlit as cl
from queue import Queue
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize FastAPI
app = FastAPI()

# Initialize Slack app
slack_app = AsyncApp(token=os.environ["SLACK_BOT_TOKEN"])

# Queues for message passing
slack_to_chainlit = Queue()
chainlit_to_slack = Queue()

# Chainlit setup
cl.user_session.set("slack_to_chainlit", slack_to_chainlit)
cl.user_session.set("chainlit_to_slack", chainlit_to_slack)

@cl.on_chat_start
async def chat_start():
    await cl.Message(content="Chainlit session started. Ready to process messages from Slack!").send()

@cl.on_message
async def on_message(message: cl.Message):
    logger.info(f"Received message in Chainlit: {message.content}")
    response = f"Chainlit processed: {message.content}"
    await cl.Message(content=response).send()
    chainlit_to_slack.put(response)

# Slack event handlers
@slack_app.event("app_mention")
async def handle_app_mention(body, say):
    logger.info("Received app mention in Slack")
    event = body["event"]
    slack_to_chainlit.put(event["text"])
    response = await wait_for_chainlit_response()
    await say(response)

@slack_app.event("message")
async def handle_message(body, say):
    logger.info("Received message in Slack")
    event = body["event"]
    if "channel_type" in event and event["channel_type"] == "channel":
        slack_to_chainlit.put(event["text"])
        response = await wait_for_chainlit_response()
        await say(response)

async def wait_for_chainlit_response():
    while True:
        if not chainlit_to_slack.empty():
            return chainlit_to_slack.get()
        await asyncio.sleep(0.1)

# FastAPI routes
@app.get("/")
async def get():
    return HTMLResponse("""
    <html>
        <body>
            <h1>FastAPI with Chainlit and Slack</h1>
        </body>
    </html>
    """)

# WebSocket for Chainlit
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}")

# Background tasks
@app.on_event("startup")
async def startup_event():
    # Start Slack app
    handler = AsyncSocketModeHandler(slack_app, os.environ["SLACK_APP_TOKEN"])
    await handler.start_async()
    
    # Start Chainlit in the background
    asyncio.create_task(run_chainlit())

async def run_chainlit():
    cl.run_async()

# Run the FastAPI app
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
