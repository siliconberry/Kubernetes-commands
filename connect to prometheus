import jira
from prometheus_client import start_http_server, Gauge
import time

# Jira connection details
jira_server = "your_jira_server_url"
jira_token = "your_jira_token"

# Connect to Jira using token authentication
jira_client = jira.JIRA(basic_auth=("", jira_token), server=jira_server)

# Define Prometheus metrics
jira_issues_open = Gauge('jira_issues_open', 'Number of open Jira issues', ['project'])
jira_issues_in_progress = Gauge('jira_issues_in_progress', 'Number of Jira issues in progress', ['project'])
# ... add more metrics as needed

# Fetch Jira issue data
def fetch_jira_data():
    issues = jira_client.search_issues('project = "your_project"')  # Replace with your project filter
    for issue in issues:
        status = issue.fields.status.name
        project = issue.fields.project.key
        if status == "Open":
            jira_issues_open.labels(project=project).set(1)
        elif status == "In Progress":
            jira_issues_in_progress.labels(project=project).set(1)
        # Handle other statuses as needed

# Start Prometheus server
start_http_server(9090)  # Customize port if needed

# Periodically fetch and expose metrics
while True:
    try:
        fetch_jira_data()
    except Exception as e:
        print(f"Error fetching Jira data: {e}")  # Log or handle errors as needed
    time.sleep(60)  # Adjust interval as needed
